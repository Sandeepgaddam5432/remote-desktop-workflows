name: macOS VNC Desktop - Black Screen Fix

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password (default: P@ssw0rd123!)'
        required: false
        default: 'P@ssw0rd123!'
      debug_level:
        description: 'Debug level (info|verbose)'
        required: false
        default: 'verbose'
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/macos-vnc.yml'

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: System Setup & Debug Logging
        run: |
          set -x
          sudo syslog -c 0 || true
          sudo log config --mode "level:debug" || true
          mkdir -p logs
          sw_vers | tee logs/debug.txt
          uname -a | tee -a logs/debug.txt
          echo "‚úÖ Debug logging enabled"

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          cloudflared --version | tee -a logs/debug.txt

      - name: Clean Previous VNC Services
        run: |
          sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          sudo pkill -9 screensharingd || true
          sudo pkill -9 ARDAgent || true
          sleep 2
          echo "‚úÖ Services cleaned"

      - name: Configure VNC with Proper Access
        run: |
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Enable Remote Management with full VNC access
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all -allowAccessFor -allUsers \
            -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$PASSWORD"
          
          # Critical: Force VNC to always show console (not login window)
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist \
            com.apple.screensharing -dict Disabled -bool false
          
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            VNCAlwaysStartOnConsole -bool true
          
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            LoadRemoteManagementMenuExtra -bool true
          
          # Restart screen sharing service
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          sleep 5
          
          echo "‚úÖ VNC configured with console access"

      - name: Force User Login & GUI Session
        run: |
          set -e
          
          # Create user if doesn't exist
          if ! id vncuser >/dev/null 2>&1; then
            sudo sysadminctl -addUser vncuser -fullName "VNC User" -password "P@ssw0rd123!" -admin
            echo "‚úÖ User created"
          fi
          
          # Disable auto-logout and screen lock
          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser vncuser
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0
          sudo defaults write /Library/Preferences/com.apple.loginwindow DisableScreenLock -bool true
          
          # Prevent all power saving
          sudo pmset -a sleep 0 displaysleep 0 disablesleep 1
          sudo pmset -a hibernatemode 0
          
          # Switch to user session (critical for GUI)
          USER_ID=$(id -u vncuser)
          sudo /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -switchToUserID "$USER_ID" || true
          
          sleep 5
          echo "‚úÖ User session activated"

      - name: Force Desktop Environment
        run: |
          set -e
          USER_ID=$(id -u vncuser)
          
          sudo launchctl asuser "$USER_ID" sudo -u vncuser open -a "Finder"
          sleep 2
          
          # System Preferences is now System Settings on newer macOS; ignore if missing
          sudo launchctl asuser "$USER_ID" sudo -u vncuser open -a "System Settings" || true
          sleep 2
          
          # Create a visible text window
          sudo launchctl asuser "$USER_ID" sudo -u vncuser /usr/bin/osascript -e 'tell application "TextEdit" to activate' || true
          sudo launchctl asuser "$USER_ID" sudo -u vncuser /usr/bin/osascript -e 'tell application "TextEdit" to make new document' || true
          sudo launchctl asuser "$USER_ID" sudo -u vncuser /usr/bin/osascript -e 'tell application "TextEdit" to set text of document 1 to "VNC Desktop Active - Connection Ready"' || true
          
          caffeinate -u -t 5 || true
          
          sudo -u vncuser /usr/bin/osascript -e 'tell application "System Events" to keystroke "a" using {command down}' || true
          
          sleep 3
          echo "‚úÖ Desktop environment forced"

      - name: Verify WindowServer is Running
        run: |
          ps aux | grep -i windowserver | grep -v grep || {
            echo "‚ö†Ô∏è WindowServer not found, restarting..."
            sudo launchctl kickstart -k system/com.apple.WindowServer
            sleep 5
          }
          ps aux | grep -i windowserver | grep -v grep
          echo "‚úÖ WindowServer running"

      - name: Verify VNC Port 5900
        run: |
          if ! lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
            echo "‚ö†Ô∏è VNC not on port 5900, forcing restart..."
            
            sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
            sleep 2
            
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
              -activate -restart -configure -access -on -allowAccessFor -allUsers \
              -clientopts -setvnclegacy -vnclegacy yes
            
            sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
            sleep 5
          fi
          
          lsof -nP -iTCP:5900 -sTCP:LISTEN | tee -a logs/debug.txt
          echo "‚úÖ VNC confirmed on port 5900"

      - name: Start Cloudflare Tunnel
        run: |
          DEBUG_FLAG=""
          [ "${{ github.event.inputs.debug_level }}" = "verbose" ] && DEBUG_FLAG="--loglevel debug"
          
          cloudflared tunnel $DEBUG_FLAG --url tcp://localhost:5900 > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          
          sleep 20
          
          if ! kill -0 $TUNNEL_PID 2>/dev/null; then
            echo "‚ùå Tunnel failed to start"
            cat tunnel.log
            exit 1
          fi
          
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          if [ -z "$TUNNEL_URL" ];n            echo "‚ùå No tunnel URL found"
            tail -50 tunnel.log
            exit 1
          fi
          
          echo "TUNNEL_URL=$TUNNEL_URL" | tee -a logs/debug.txt
          echo "‚úÖ Tunnel started: $TUNNEL_URL"

      - name: Live Diagnostics
        run: |
          sudo log stream --predicate 'process == "screensharingd" OR process == "ARDAgent"' --style syslog 2>/dev/null | sed -u 's/^/[VNC-LOG] /' > vnc-live.log &
          sudo log stream --process WindowServer --style syslog 2>/dev/null | sed -u 's/^/[WS] /' > windowserver-live.log &
          echo "‚úÖ Live logging started"

      - name: Connection Instructions
        run: |
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üñ•Ô∏è  VNC CONNECTION READY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üì° VNC Address: ${TUNNEL_URL#https://}:5900"
          echo "üîë Password: ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "üë§ Username: vncuser"
          echo ""
          echo "üì± Connect using:"
          echo "  - RealVNC Viewer"
          echo "  - TightVNC"
          echo "  - macOS Screen Sharing"
          echo ""
          echo "‚ö†Ô∏è  If screen appears black initially:"
          echo "   Wait 10-15 seconds"
          echo "   Move mouse or press any key"
          echo "   Desktop will load within 30 seconds"
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      - name: Keep Alive Loop with Desktop Refresh
        run: |
          USER_ID=$(id -u vncuser)
          
          for i in {1..360}; do
            sleep 60
            echo "‚úì Minute $i/360 - Session active"
            
            if [ $((i % 2)) -eq 0 ]; then
              caffeinate -u -t 2 &
              sudo -u vncuser /usr/bin/osascript -e 'tell application "System Events" to key code 123' 2>/dev/null || true
            fi
            
            if [ $((i % 3)) -eq 0 ]; then
              sudo launchctl asuser "$USER_ID" sudo -u vncuser open -a "Finder" || true
            fi
            
            if [ $((i % 5)) -eq 0 ]; then
              echo "--- Health Check ---"
              ps aux | egrep 'WindowServer|screensharingd|ARDAgent' | grep -v grep || echo "‚ö†Ô∏è Process missing"
              lsof -nP -iTCP:5900 -sTCP:LISTEN || echo "‚ö†Ô∏è VNC port not listening"
              who
            fi
            
            if [ $((i % 10)) -eq 0 ]; then
              sudo launchctl asuser "$USER_ID" sudo -u vncuser /usr/bin/osascript -e 'tell application "Finder" to activate' || true
              sleep 1
              sudo launchctl asuser "$USER_ID" sudo -u vncuser /usr/bin/osascript -e 'tell application "TextEdit" to activate' || true
            fi
            
            if [ $((i % 15)) -eq 0 ]; then
              cp -f tunnel.log logs/tunnel.log 2>/dev/null || true
              sudo log show --last 15m --info --predicate 'process == "screensharingd" OR process == "ARDAgent" OR process == "WindowServer"' > logs/system_15m.log 2>/dev/null || true
            fi
          done
          
          echo "‚è∞ 6 hour timeout reached"

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-vnc-debug-logs
          path: |
            logs/**
            tunnel.log
            vnc-live.log
            windowserver-live.log
          retention-days: 7
