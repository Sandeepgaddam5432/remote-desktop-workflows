name: macOS VNC Desktop - Fixed for GitHub Actions

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password'
        required: false
        default: 'P@ssw0rd123!'
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/macos-vnc.yml'

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: System Setup
        run: |
          set -x
          mkdir -p logs
          sw_vers | tee logs/system.txt
          whoami | tee -a logs/system.txt
          id | tee -a logs/system.txt
          echo "‚úÖ System info captured"

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          cloudflared --version

      - name: Configure VNC for Current User
        run: |
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Enable Remote Management for current runner user
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all \
            -allowAccessFor -specifiedUsers
          
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -users runner -access -on -privs -all
          
          # Set VNC password for runner user
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$PASSWORD"
          
          # Enable console access
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            VNCAlwaysStartOnConsole -bool true
          
          # Restart services
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent
          
          sleep 3
          echo "‚úÖ VNC configured for runner user"

      - name: Disable Sleep and Lock
        run: |
          sudo pmset -a sleep 0 displaysleep 0 disablesleep 1
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0
          echo "‚úÖ Power settings configured"

      - name: Create GUI Session Bootstrap
        run: |
          # Create a LaunchAgent to ensure GUI session exists
          mkdir -p ~/Library/LaunchAgents
          
          cat > ~/Library/LaunchAgents/com.github.keepalive.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>Label</key>
            <string>com.github.keepalive</string>
            <key>ProgramArguments</key>
            <array>
              <string>/bin/bash</string>
              <string>-c</string>
              <string>while true; do sleep 60; done</string>
            </array>
            <key>RunAtLoad</key>
            <true/>
            <key>KeepAlive</key>
            <true/>
          </dict>
          </plist>
          EOF
          
          launchctl load ~/Library/LaunchAgents/com.github.keepalive.plist || true
          echo "‚úÖ LaunchAgent created"

      - name: Force Aqua GUI Session
        run: |
          # Method 1: Use bootstrap to create proper GUI session
          sudo launchctl bootstrap gui/$(id -u) ~/Library/LaunchAgents/com.github.keepalive.plist 2>/dev/null || true
          
          # Method 2: Start WindowServer if not running
          if ! pgrep -x "WindowServer" > /dev/null; then
            sudo launchctl kickstart -k system/com.apple.WindowServer
            sleep 5
          fi
          
          # Method 3: Trigger Aqua session via loginwindow
          sudo launchctl kickstart -k system/com.apple.loginwindow
          sleep 3
          
          echo "‚úÖ GUI session initialized"

      - name: Launch Desktop Applications
        run: |
          # Wait for WindowServer
          for i in {1..10}; do
            if pgrep -x "WindowServer" > /dev/null; then
              echo "‚úÖ WindowServer running"
              break
            fi
            echo "Waiting for WindowServer... attempt $i"
            sleep 2
          done
          
          # Launch apps directly (no launchctl asuser needed)
          open -a Finder &
          sleep 2
          
          open -a TextEdit &
          sleep 2
          
          # Create a visible window using osascript
          /usr/bin/osascript <<'APPLESCRIPT' &
          try
            tell application "TextEdit"
              activate
              delay 1
              make new document
              set text of document 1 to "üñ•Ô∏è VNC Desktop Active
          
          ‚úÖ Connection Ready
          üë§ User: runner
          üîë Password: Use provided VNC password
          
          This window confirms desktop is visible.
          GitHub Actions macOS Runner"
            end tell
          end try
          APPLESCRIPT
          
          sleep 3
          echo "‚úÖ Desktop apps launched"

      - name: Verify VNC Service
        run: |
          echo "=== VNC Service Status ==="
          
          # Check screensharingd process
          if pgrep -x "screensharingd" > /dev/null; then
            echo "‚úÖ screensharingd running"
            ps aux | grep screensharingd | grep -v grep
          else
            echo "‚ö†Ô∏è screensharingd not running, starting..."
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent
            sleep 3
          fi
          
          # Check port 5900
          if lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
            echo "‚úÖ VNC listening on port 5900"
            lsof -nP -iTCP:5900 -sTCP:LISTEN
          else
            echo "‚ùå VNC not on port 5900"
            exit 1
          fi
          
          # Check WindowServer
          if pgrep -x "WindowServer" > /dev/null; then
            echo "‚úÖ WindowServer running"
          else
            echo "‚ö†Ô∏è WindowServer not running"
          fi

      - name: Start Cloudflare Tunnel
        run: |
          cloudflared tunnel --url tcp://localhost:5900 > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          
          echo "Tunnel PID: $TUNNEL_PID"
          sleep 20
          
          if ! kill -0 $TUNNEL_PID 2>/dev/null; then
            echo "‚ùå Tunnel failed"
            cat tunnel.log
            exit 1
          fi
          
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          if [ -z "$TUNNEL_URL" ]; then
            echo "‚ùå No tunnel URL found"
            tail -50 tunnel.log
            exit 1
          fi
          
          echo "tunnel_url=$TUNNEL_URL" >> $GITHUB_OUTPUT
          echo "TUNNEL_URL=$TUNNEL_URL" > logs/tunnel_url.txt
          echo "‚úÖ Tunnel started: $TUNNEL_URL"

      - name: Display Connection Info
        run: |
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
          echo "‚ïë        üñ•Ô∏è  VNC CONNECTION READY                   ‚ïë"
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          echo ""
          echo "üì° VNC Address: ${TUNNEL_URL#https://}:5900"
          echo "üîë Password: ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "üë§ Username: runner"
          echo ""
          echo "üì± Recommended VNC Clients:"
          echo "   ‚Ä¢ RealVNC Viewer"
          echo "   ‚Ä¢ TightVNC"
          echo "   ‚Ä¢ macOS Screen Sharing (Finder ‚Üí Go ‚Üí Connect to Server)"
          echo ""
          echo "‚è∞ Session will stay active for 6 hours"
          echo ""
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"

      - name: Keep Session Alive
        run: |
          for i in {1..360}; do
            sleep 60
            echo "‚úì Minute $i/360 - Session active"
            
            # Every 3 minutes: health check
            if [ $((i % 3)) -eq 0 ]; then
              echo "--- Health Check ---"
              pgrep -x "WindowServer" > /dev/null && echo "‚úÖ WindowServer OK" || echo "‚ö†Ô∏è WindowServer down"
              pgrep -x "screensharingd" > /dev/null && echo "‚úÖ VNC OK" || echo "‚ö†Ô∏è VNC down"
              lsof -nP -iTCP:5900 -sTCP:LISTEN > /dev/null && echo "‚úÖ Port 5900 OK" || echo "‚ö†Ô∏è Port issue"
            fi
            
            # Every 5 minutes: wake display
            if [ $((i % 5)) -eq 0 ]; then
              caffeinate -u -t 2 &
            fi
            
            # Every 10 minutes: refresh desktop
            if [ $((i % 10)) -eq 0 ]; then
              open -a Finder &
              /usr/bin/osascript -e 'tell application "System Events" to keystroke tab' || true
            fi
            
            # Every 15 minutes: save logs
            if [ $((i % 15)) -eq 0 ]; then
              cp tunnel.log logs/ 2>/dev/null || true
              ps aux | grep -E 'WindowServer|screensharingd|ARDAgent' | grep -v grep > logs/processes.txt || true
            fi
          done
          
          echo "‚è∞ 6 hour timeout reached"

      - name: Upload Debug Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-vnc-logs
          path: |
            logs/**
            tunnel.log
          retention-days: 3
