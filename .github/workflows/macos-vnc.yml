name: macOS VNC Desktop - Remote Access (Debug)

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password (default: P@ssw0rd123!)'
        required: false
        default: 'P@ssw0rd123!'
      debug_level:
        description: 'Debug level (info|verbose)'
        required: false
        default: 'verbose'
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/macos-vnc.yml'

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Extended Logging
        run: |
          set -x
          sudo syslog -c 0
          sudo log config --mode "level:debug" || true
          mkdir -p logs
          echo "✅ Debug logging enabled"

      - name: System Snapshot (Pre)
        run: |
          echo "==== PRE SNAPSHOT ====" | tee -a logs/debug.txt
          sw_vers | tee -a logs/debug.txt
          uname -a | tee -a logs/debug.txt
          id | tee -a logs/debug.txt
          who | tee -a logs/debug.txt || true
          ps aux | grep -E 'VNC|ARDAgent|screensharing' | tee -a logs/debug.txt || true
          echo "======================" | tee -a logs/debug.txt

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          cloudflared --version | tee -a logs/debug.txt

      - name: Prepare Screen Sharing Services
        run: |
          sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          sudo pkill -f screensharingd || true
          sudo pkill -f ARDAgent || true
          echo "✅ Cleaned old services"

      - name: Configure VNC and Login Window
        run: |
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Enable Remote Management and VNC legacy
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all -allowAccessFor -allUsers \
            -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$PASSWORD"

          # Ensure screen sharing enabled at login window
          sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowLaunchesRelaunchApps -bool false
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist VNCAlwaysStartOnConsole -bool true
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false || true

          # Restart service
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          sleep 3
          
          echo "✅ VNC configured"

      - name: Create/Login Test User and Open GUI
        run: |
          set -e
          # Create a loginable user
          if ! id vncuser >/dev/null 2>&1; then
            sudo sysadminctl -addUser vncuser -fullName "VNC User" -password "P@ssw0rd123!" -admin
          fi
          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser vncuser
          
          # Prevent sleep
          sudo pmset -a sleep 0
          sudo pmset -a displaysleep 0
          sudo pmset -a disablesleep 1

          # Try to switch to user session
          sudo /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -switchToUserID $(id -u vncuser) || true
          
          # Launch a visible app to force a desktop
          sudo -u vncuser open -a "TextEdit" || true
          sudo -u vncuser open -a "Finder" || true

          echo "✅ User session initialized"

      - name: Diagnostics - VNC and WindowServer
        run: |
          echo "==== SERVICES ====" | tee -a logs/debug.txt
          ps aux | egrep 'WindowServer|screensharingd|ARDAgent' | tee -a logs/debug.txt || true
          echo "Ports:" | tee -a logs/debug.txt
          lsof -nP -iTCP:5900 -sTCP:LISTEN | tee -a logs/debug.txt || true
          echo "Launchctl list:" | tee -a logs/debug.txt
          launchctl list | egrep 'screensharing|ard' | tee -a logs/debug.txt || true

      - name: Start Cloudflare Tunnel (Debug)
        run: |
          DEBUG_FLAG=""
          [ "${{ github.event.inputs.debug_level }}" = "verbose" ] && DEBUG_FLAG="--loglevel debug"
          cloudflared tunnel $DEBUG_FLAG --url tcp://localhost:5900 > tunnel.log 2>&1 &
          sleep 20
          echo "==== TUNNEL LOG (tail) ====" | tee -a logs/tunnel_tail.txt
          tail -n 100 tunnel.log | tee -a logs/tunnel_tail.txt
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          echo "TUNNEL_URL=$TUNNEL_URL" | tee -a logs/debug.txt
          [ -n "$TUNNEL_URL" ] && echo "🌐 TUNNEL URL: $TUNNEL_URL" || (echo "❌ No tunnel URL" && exit 1)

      - name: Real-time VNC Log Tail
        run: |
          LOG_SRC="/Library/Logs/RemoteManagement/" 
          echo "RemoteManagement logs:" | tee -a logs/debug.txt
          ls -l "$LOG_SRC" 2>/dev/null | tee -a logs/debug.txt || true
          
          # Background tail for ARD and system logs
          (sudo log stream --predicate 'process == "screensharingd" || process == "ARDAgent"' --style syslog | sed -u 's/^/[VNC-LOG] /' > vnc-live.log &) || true
          (sudo log stream --process WindowServer --style syslog | sed -u 's/^/[WS] /' > windowserver-live.log &) || true
          echo "✅ Live log capture started"

      - name: Show Connection Instructions
        run: |
          echo "============================================"
          echo "Connect with VNC Viewer to: [tunnel-url]:5900"
          echo "Password: ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "If screen is black, leave session connected for 1-2 minutes while logs are captured."
          echo "============================================"

      - name: Keep Session Active (with periodic dumps)
        run: |
          for i in {1..360}; do
            sleep 60
            echo "✓ Minute $i/360"
            if [ $((i % 5)) -eq 0 ]; then
              echo "--- STATUS DUMP minute $i ---"
              who || true
              ps aux | egrep 'WindowServer|screensharingd|ARDAgent' || true
              lsof -nP -iTCP:5900 -sTCP:LISTEN || true
            fi
            if [ $((i % 15)) -eq 0 ]; then
              echo "--- Saving logs snapshot ---"
              cp -f tunnel.log logs/tunnel.log || true
              sudo log show --last 15m --info --predicate 'process == "screensharingd" || process == "ARDAgent" || process == "WindowServer"' > logs/system_15m.log 2>/dev/null || true
            fi
          done

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-vnc-debug-logs
          path: |
            logs/**
            tunnel.log
            vnc-live.log
            windowserver-live.log
