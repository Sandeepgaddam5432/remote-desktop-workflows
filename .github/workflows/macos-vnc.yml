name: macOS VNC Desktop - Remote Access

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password (default: P@ssw0rd123!)'
        required: false
        default: 'P@ssw0rd123!'
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/macos-vnc.yml'

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          echo "‚úÖ Cloudflared Installed!"

      - name: Create Dummy User for VNC Access
        run: |
          # Create a user that can be logged in for VNC access
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 20
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          sudo dscl . -passwd /Users/vncuser P@ssw0rd123!
          
          # Create home directory
          sudo mkdir -p /Users/vncuser
          sudo chown vncuser:staff /Users/vncuser
          
          # Add to admin group for full access
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          echo "‚úÖ VNC User Created!"

      - name: Configure macOS for VNC Login Screen Access
        run: |
          # Disable relaunch apps at login
          sudo /usr/bin/defaults write /Library/Preferences/com.apple.loginwindow LoginwindowLaunchesRelaunchApps -bool false
          
          # Enable VNC for all users including login screen
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all -allowAccessFor -allUsers \
            -clientopts -setvnclegacy -vnclegacy yes
          
          # Enable screen sharing at login window
          sudo launchctl enable system/com.apple.screensharing 2>/dev/null || true
          sudo launchctl bootstrap system /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          
          # Additional VNC settings for login screen
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist VNCAlwaysStartOnConsole -bool true
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
          
          echo "‚úÖ Login Screen VNC Access Configured!"

      - name: Enable VNC/Screen Sharing
        run: |
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -restart -agent -privs -all -allowAccessFor -allUsers
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
          echo "‚úÖ VNC Enabled!"

      - name: Set VNC Password
        shell: bash
        run: |
          set -e
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Ensure RemoteManagement directories exist
          sudo mkdir -p /Library/Preferences
          
          # Use kickstart to set legacy VNC password
          echo "$PASSWORD" | sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all \
            -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$PASSWORD"
          
          # Additional password configuration for login screen
          sudo /usr/libexec/PlistBuddy -c "Add :VNCLegacyPasswords array" /Library/Preferences/com.apple.RemoteManagement.plist 2>/dev/null || true
          sudo /usr/libexec/PlistBuddy -c "Delete :VNCLegacyPasswords:0" /Library/Preferences/com.apple.RemoteManagement.plist 2>/dev/null || true
          
          HASH=$(python3 - <<'PY'
import sys,hashlib
print(hashlib.md5(b"$PASSWORD").hexdigest())
PY
)
          sudo /usr/libexec/PlistBuddy -c "Add :VNCLegacyPasswords:0 data $(echo $HASH | xxd -r -p | base64)" /Library/Preferences/com.apple.RemoteManagement.plist 2>/dev/null || true
          
          # Restart screen sharing service
          sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          
          echo "‚úÖ VNC Password Set: $PASSWORD"

      - name: Auto Login VNC User
        run: |
          # Enable automatic login for VNC user
          sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser vncuser
          
          # Disable screen lock and sleep
          sudo pmset -a displaysleep 0
          sudo pmset -a sleep 0
          sudo pmset -a disablesleep 1
          
          # Login the user via fast user switching
          sudo /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -switchToUserID 1001
          
          echo "‚úÖ VNC User Auto-Login Configured!"

      - name: Get System Information
        run: |
          echo "üìä SYSTEM INFORMATION:"
          echo "   macOS Version: $(sw_vers -productVersion)"
          echo "   Architecture: $(uname -m)"
          echo "   Hostname: $(hostname)"
          echo "   Current User: $(whoami)"
          echo "   Logged in Users: $(who)"
          echo "   VNC Processes: $(ps aux | grep VNC || echo 'None')"

      - name: Start Cloudflare Tunnel
        run: |
          echo "============================================"
          echo "üöÄ macOS VNC - CLOUDFLARE TUNNEL"
          echo "============================================"
          echo ""
          
          # Start tunnel in background
          cloudflared tunnel --url tcp://localhost:5900 > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          
          # Wait for tunnel to establish
          sleep 20
          
          # Extract tunnel URL
          TUNNEL_URL=$(cat tunnel.log | grep -o 'https://[^[:space:]]*trycloudflare.com' | head -1)
          
          if [ -n "$TUNNEL_URL" ]; then
            echo "üåê TUNNEL URL: $TUNNEL_URL"
          else
            echo "‚ùå Failed to get tunnel URL. Check logs:"
            cat tunnel.log
          fi
          
          echo ""
          echo "üìã CONNECTION DETAILS:"
          echo "   PASSWORD: ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "   OS: macOS $(sw_vers -productVersion)"
          echo "   Architecture: $(uname -m)"
          echo "   VNC User: vncuser (should be auto-logged in)"
          echo "============================================"
          echo ""
          echo "üîß VNC CLIENT SETUP:"
          echo "   1. Copy the tunnel URL above"
          echo "   2. Use VNC client (RealVNC, TightVNC, etc.)"
          echo "   3. Connect to: [tunnel-url]:5900"
          echo "   4. Enter password when prompted"
          echo "   5. You should see desktop, not black screen!"
          echo "============================================"

      - name: Keep Session Alive
        run: |
          echo "‚è≥ Session Active - Keeping alive for 6 hours..."
          echo "üí° To stop early, cancel the workflow manually"
          
          COUNTER=0
          while [ $COUNTER -lt 360 ]; do  # 6 hours = 360 minutes
            sleep 60
            COUNTER=$((COUNTER + 1))
            echo "‚úì Active - $(date '+%H:%M:%S') - $(($COUNTER))/360 minutes"
            
            # Show tunnel status every 30 minutes
            if [ $((COUNTER % 30)) -eq 0 ]; then
              echo "üîÑ Checking tunnel status..."
              if pgrep -f cloudflared > /dev/null; then
                echo "‚úÖ Tunnel is running"
                # Check VNC user login status
                if who | grep vncuser > /dev/null; then
                  echo "‚úÖ VNC User is logged in"
                else
                  echo "‚ö†Ô∏è  VNC User not logged in, attempting re-login..."
                  sudo /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -switchToUserID 1001 2>/dev/null || true
                fi
              else
                echo "‚ùå Tunnel stopped, restarting..."
                cloudflared tunnel --url tcp://localhost:5900 > tunnel.log 2>&1 &
                sleep 10
                cat tunnel.log | grep -o 'https://[^[:space:]]*trycloudflare.com' | head -1
              fi
            fi
          done
          
          echo "‚è∞ Session completed - 6 hours elapsed"