name: macOS VNC Desktop - Working Solution

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password'
        required: false
        default: 'P@ssw0rd123!'

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: System Info
        run: |
          mkdir -p logs
          sw_vers | tee logs/system.txt
          whoami | tee -a logs/system.txt
          echo "✅ System ready"

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          cloudflared --version

      - name: Stop Existing VNC Services
        run: |
          sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          sudo pkill -9 screensharingd 2>/dev/null || true
          sudo pkill -9 ARDAgent 2>/dev/null || true
          sleep 2
          echo "✅ Old services stopped"

      - name: Configure VNC with Force Start
        run: |
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Full kickstart with all options
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate \
            -configure \
            -access -on \
            -restart \
            -agent \
            -privs -all \
            -allowAccessFor -specifiedUsers \
            -clientopts -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$PASSWORD"
          
          # Add runner user explicitly
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -users runner -access -on -privs -all
          
          # Critical: Force console mode
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            VNCAlwaysStartOnConsole -bool true
          
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            LoadRemoteManagementMenuExtra -bool true
          
          sleep 2
          echo "✅ VNC configured"

      - name: Force Load Screen Sharing Service
        run: |
          # Method 1: Direct launchctl load
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist || {
            echo "⚠️ Standard load failed, trying bootstrap..."
            sudo launchctl bootstrap system /System/Library/LaunchDaemons/com.apple.screensharing.plist || true
          }
          
          sleep 3
          
          # Method 2: Kickstart the service
          sudo launchctl kickstart -k system/com.apple.screensharing || true
          
          sleep 2
          
          # Method 3: Start ARDAgent explicitly
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -restart -agent -console
          
          sleep 3
          
          echo "✅ Services loaded"

      - name: Verify and Force VNC Port
        run: |
          echo "=== Checking VNC Port 5900 ==="
          
          # Try up to 5 times
          for attempt in {1..5}; do
            echo "Attempt $attempt/5..."
            
            if lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
              echo "✅ VNC listening on port 5900"
              lsof -nP -iTCP:5900 -sTCP:LISTEN
              break
            fi
            
            echo "⚠️ Port 5900 not ready, forcing restart..."
            
            # Force restart with different methods
            if [ $attempt -eq 1 ]; then
              sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent -console
            elif [ $attempt -eq 2 ]; then
              sudo launchctl kickstart -kp system/com.apple.screensharing
            elif [ $attempt -eq 3 ]; then
              sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
              sleep 1
              sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
            elif [ $attempt -eq 4 ]; then
              sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -stop
              sleep 2
              sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -restart -agent -console
            fi
            
            sleep 5
          done
          
          # Final check
          if ! lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
            echo "❌ Failed to start VNC on port 5900"
            echo "=== Process Status ==="
            ps aux | grep -E 'screensharing|ARDAgent' | grep -v grep || echo "No VNC processes"
            echo "=== Launchctl list ==="
            sudo launchctl list | grep -i screen || echo "No screen sharing service"
            exit 1
          fi
          
          echo "✅ VNC service verified"

      - name: Disable Power Management
        run: |
          sudo pmset -a sleep 0 displaysleep 0 disablesleep 1
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0
          echo "✅ Power management disabled"

      - name: Initialize GUI Session
        run: |
          # Ensure WindowServer is running
          if ! pgrep -x "WindowServer" > /dev/null; then
            sudo launchctl kickstart -k system/com.apple.WindowServer
            sleep 5
          fi
          
          # Kickstart loginwindow for full GUI
          sudo launchctl kickstart -k system/com.apple.loginwindow
          sleep 3
          
          echo "✅ GUI initialized"

      - name: Launch Desktop Apps
        run: |
          # Wait for WindowServer
          for i in {1..10}; do
            if pgrep -x "WindowServer" > /dev/null; then
              echo "✅ WindowServer running"
              break
            fi
            echo "Waiting for WindowServer... $i/10"
            sleep 2
          done
          
          # Launch Finder
          open -a Finder &
          sleep 2
          
          # Launch TextEdit with visible window
          open -a TextEdit &
          sleep 2
          
          # Create welcome message
          /usr/bin/osascript <<'APPLESCRIPT' &
          try
            tell application "TextEdit"
              activate
              delay 1
              make new document
              set text of document 1 to "🖥️ macOS VNC Desktop - GitHub Actions
          
          ✅ Connection Status: ACTIVE
          👤 User: runner
          🔑 Password: Check connection info below
          
          📱 This desktop is running on a GitHub Actions macOS runner.
          You can use Finder, Terminal, and other apps normally.
          
          ⏰ Session will remain active for 6 hours."
            end tell
          end try
          APPLESCRIPT
          
          sleep 3
          echo "✅ Desktop apps launched"

      - name: Start Cloudflare Tunnel
        run: |
          cloudflared tunnel --url tcp://localhost:5900 > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          echo "Tunnel PID: $TUNNEL_PID"
          
          sleep 20
          
          if ! kill -0 $TUNNEL_PID 2>/dev/null; then
            echo "❌ Tunnel failed to start"
            cat tunnel.log
            exit 1
          fi
          
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          if [ -z "$TUNNEL_URL" ]; then
            echo "❌ No tunnel URL found"
            tail -50 tunnel.log
            exit 1
          fi
          
          echo "TUNNEL_URL=$TUNNEL_URL" | tee logs/tunnel_url.txt
          echo "✅ Tunnel active: $TUNNEL_URL"

      - name: Display Connection Instructions
        run: |
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          VNC_HOST="${TUNNEL_URL#https://}"
          
          echo ""
          echo "╔════════════════════════════════════════════════════════╗"
          echo "║                                                        ║"
          echo "║          🖥️  macOS VNC DESKTOP READY                  ║"
          echo "║                                                        ║"
          echo "╚════════════════════════════════════════════════════════╝"
          echo ""
          echo "  📡 VNC Server:  $VNC_HOST:5900"
          echo "  🔑 Password:    ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "  👤 Username:    runner"
          echo ""
          echo "  📱 Recommended VNC Clients:"
          echo "     • RealVNC Viewer      (https://www.realvnc.com/download/viewer/)"
          echo "     • TightVNC            (https://www.tightvnc.com/download.php)"
          echo "     • macOS Screen Sharing (Finder → Go → Connect to Server)"
          echo ""
          echo "  ⏰ Session Duration: 6 hours (auto-disconnect after timeout)"
          echo ""
          echo "  💡 Connection Tips:"
          echo "     - If black screen appears, wait 10-15 seconds"
          echo "     - Move mouse to wake display"
          echo "     - TextEdit window should be visible on desktop"
          echo ""
          echo "╚════════════════════════════════════════════════════════╝"
          echo ""

      - name: Keep Session Active
        run: |
          for i in {1..360}; do
            sleep 60
            echo "✓ Minute $i/360"
            
            # Every 3 minutes: Health check
            if [ $((i % 3)) -eq 0 ]; then
              pgrep -x "WindowServer" > /dev/null && echo "  ✅ WindowServer OK" || echo "  ⚠️ WindowServer down"
              pgrep -x "screensharingd" > /dev/null && echo "  ✅ VNC OK" || echo "  ⚠️ VNC down"
              lsof -nP -iTCP:5900 -sTCP:LISTEN > /dev/null 2>&1 && echo "  ✅ Port 5900 OK" || echo "  ⚠️ Port issue"
            fi
            
            # Every 5 minutes: Wake display
            if [ $((i % 5)) -eq 0 ]; then
              caffeinate -u -t 2 &
            fi
            
            # Every 10 minutes: Refresh desktop
            if [ $((i % 10)) -eq 0 ]; then
              open -a Finder &
              /usr/bin/osascript -e 'tell application "System Events" to keystroke tab' 2>/dev/null || true
            fi
            
            # Every 15 minutes: Save logs
            if [ $((i % 15)) -eq 0 ]; then
              cp tunnel.log logs/ 2>/dev/null || true
              ps aux | grep -E 'WindowServer|screensharing|ARDAgent' | grep -v grep > logs/processes_$i.txt 2>/dev/null || true
            fi
          done
          
          echo "⏰ Session timeout reached (6 hours)"

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-vnc-logs
          path: |
            logs/**
            tunnel.log
          retention-days: 3
