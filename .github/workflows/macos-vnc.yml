name: macOS VNC - Port 5900/5901 Flexible

on:
  workflow_dispatch:
    inputs:
      password:
        description: 'VNC Password'
        required: false
        default: 'P@ssw0rd123!'
      vnc_port:
        description: 'VNC Port (5900 or 5901)'
        required: false
        default: '5900'
  push:
    branches: [ main ]

jobs:
  macos-desktop:
    runs-on: macos-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System Info
        run: |
          mkdir -p logs
          sw_vers | tee logs/system.txt
          whoami | tee -a logs/system.txt
          echo "✅ System ready"

      - name: Install Cloudflared
        run: |
          brew install cloudflare/cloudflare/cloudflared
          cloudflared --version

      - name: Enable Screen Sharing (Port 5900)
        run: |
          PASSWORD="${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          
          # Method 1: Enable built-in Screen Sharing (uses port 5900)
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist \
            com.apple.screensharing -dict Disabled -bool false
          
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
          
          # Method 2: Enable ARD (also uses port 5900)
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -restart -agent -privs -all \
            -allowAccessFor -allUsers -clientopts -setvnclegacy -vnclegacy yes \
            -setvncpw -vncpw "$PASSWORD"
          
          sudo defaults write /Library/Preferences/com.apple.RemoteManagement.plist \
            VNCAlwaysStartOnConsole -bool true
          
          sleep 5
          echo "✅ Screen sharing services enabled"

      - name: Start VNC Server Manually (Port 5901 fallback)
        run: |
          # If port 5900 is not available, start osxvnc on 5901
          if ! lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
            echo "⚠️ Port 5900 not available, using port 5901"
            
            # Install OSXvnc-server for custom port support
            brew install --cask osxvnc-server 2>/dev/null || true
            
            # Alternative: Use built-in VNC but force port
            sudo defaults write /Library/Preferences/com.apple.screensharing \
              VNCServerPort -int 5901
            
            sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
            sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
            
            sleep 5
          fi
          
          echo "✅ VNC server configuration complete"

      - name: Disable Sleep & Locks
        run: |
          sudo pmset -a sleep 0 displaysleep 0 disablesleep 1
          sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -int 0
          echo "✅ Power settings configured"

      - name: Force WindowServer & GUI
        run: |
          # Ensure WindowServer is running
          if ! pgrep -x "WindowServer" > /dev/null; then
            sudo launchctl kickstart -k system/com.apple.WindowServer
            sleep 5
          fi
          
          # Trigger loginwindow for GUI session
          sudo launchctl kickstart -k system/com.apple.loginwindow
          sleep 3
          
          echo "✅ GUI initialized"

      - name: Launch Desktop Apps
        run: |
          # Wait for WindowServer
          for i in {1..10}; do
            if pgrep -x "WindowServer" > /dev/null; then
              echo "✅ WindowServer running"
              break
            fi
            sleep 2
          done
          
          # Launch visible applications
          open -a Finder &
          sleep 2
          open -a TextEdit &
          sleep 2
          
          # Create welcome window
          /usr/bin/osascript -e '
          tell application "TextEdit"
            activate
            delay 1
            make new document
            set text of document 1 to "🖥️ VNC Desktop Active

✅ Connection Ready
👤 User: runner
🔑 Check workflow output for password

This confirms desktop is visible."
          end tell
          ' &
          
          sleep 3
          echo "✅ Desktop apps launched"

      - name: Detect VNC Port
        id: detect_port
        run: |
          VNC_PORT=""
          
          # Check port 5900 first
          if lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
            VNC_PORT="5900"
            echo "✅ VNC on port 5900"
          # Check port 5901 fallback
          elif lsof -nP -iTCP:5901 -sTCP:LISTEN >/dev/null 2>&1; then
            VNC_PORT="5901"
            echo "✅ VNC on port 5901"
          # Try one more time to start on 5900
          else
            echo "⚠️ No VNC port detected, forcing restart..."
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent
            sleep 5
            
            if lsof -nP -iTCP:5900 -sTCP:LISTEN >/dev/null 2>&1; then
              VNC_PORT="5900"
            elif lsof -nP -iTCP:5901 -sTCP:LISTEN >/dev/null 2>&1; then
              VNC_PORT="5901"
            fi
          fi
          
          if [ -z "$VNC_PORT" ]; then
            echo "❌ VNC failed to start on any port"
            echo "=== Debug Info ==="
            ps aux | grep -E 'screensharingd|ARDAgent' | grep -v grep
            lsof -nP -iTCP -sTCP:LISTEN | grep -E '590[0-9]'
            exit 1
          fi
          
          echo "vnc_port=$VNC_PORT" >> $GITHUB_OUTPUT
          echo "VNC_PORT=$VNC_PORT" > logs/vnc_port.txt
          
          # Show listening info
          lsof -nP -iTCP:$VNC_PORT -sTCP:LISTEN
          
          echo "✅ VNC confirmed on port $VNC_PORT"

      - name: Start Cloudflare Tunnel
        run: |
          VNC_PORT=$(cat logs/vnc_port.txt)
          
          cloudflared tunnel --url tcp://localhost:$VNC_PORT > tunnel.log 2>&1 &
          TUNNEL_PID=$!
          
          sleep 20
          
          if ! kill -0 $TUNNEL_PID 2>/dev/null; then
            echo "❌ Tunnel failed"
            cat tunnel.log
            exit 1
          fi
          
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*trycloudflare.com' tunnel.log | head -1)
          
          if [ -z "$TUNNEL_URL" ]; then
            echo "❌ No tunnel URL"
            tail -50 tunnel.log
            exit 1
          fi
          
          echo "TUNNEL_URL=$TUNNEL_URL" >> logs/connection.txt
          echo "✅ Tunnel: $TUNNEL_URL → localhost:$VNC_PORT"

      - name: Connection Instructions
        run: |
          TUNNEL_URL=$(grep 'TUNNEL_URL=' logs/connection.txt | cut -d'=' -f2)
          VNC_PORT=$(cat logs/vnc_port.txt)
          
          echo "╔════════════════════════════════════════════════╗"
          echo "║      🖥️  macOS VNC READY                      ║"
          echo "╚════════════════════════════════════════════════╝"
          echo ""
          echo "📡 VNC Address: ${TUNNEL_URL#https://}:$VNC_PORT"
          echo "🔑 Password: ${{ github.event.inputs.password || 'P@ssw0rd123!' }}"
          echo "👤 Username: runner"
          echo "🔌 VNC Port: $VNC_PORT"
          echo ""
          echo "📱 Recommended Clients:"
          echo "   • RealVNC Viewer"
          echo "   • TightVNC"
          echo "   • macOS Screen Sharing"
          echo ""
          echo "⏰ Session active for 6 hours"
          echo "╚════════════════════════════════════════════════╝"

      - name: Keep Alive
        run: |
          VNC_PORT=$(cat logs/vnc_port.txt)
          
          for i in {1..360}; do
            sleep 60
            echo "✓ Min $i/360"
            
            # Every 3 min: health check
            if [ $((i % 3)) -eq 0 ]; then
              pgrep -x "WindowServer" > /dev/null && echo "✅ WS" || echo "⚠️ WS"
              lsof -nP -iTCP:$VNC_PORT -sTCP:LISTEN > /dev/null && echo "✅ VNC:$VNC_PORT" || echo "⚠️ VNC"
            fi
            
            # Every 5 min: wake
            if [ $((i % 5)) -eq 0 ]; then
              caffeinate -u -t 2 &
            fi
            
            # Every 10 min: refresh
            if [ $((i % 10)) -eq 0 ]; then
              open -a Finder &
              /usr/bin/osascript -e 'tell app "System Events" to keystroke tab' 2>/dev/null || true
            fi
            
            # Every 15 min: logs
            if [ $((i % 15)) -eq 0 ]; then
              cp tunnel.log logs/ 2>/dev/null || true
              ps aux | grep -E 'WindowServer|screensharing' > logs/processes.txt 2>/dev/null || true
            fi
          done

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vnc-logs
          path: |
            logs/**
            tunnel.log
          retention-days: 2
